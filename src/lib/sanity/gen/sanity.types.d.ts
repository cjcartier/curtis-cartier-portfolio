/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Pages = {
  _id: string;
  _type: 'pages';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  layout: Array<
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'conversionPanel';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'hero';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'portCo';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'switchback';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'testimonialComponent';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'toolsComponent';
      }
  >;
  slug: Slug;
  publishedAt?: string;
};

export type Footer = {
  _id: string;
  _type: 'footer';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  mainLinks?: Array<{
    label: string;
    link: string;
    _type: 'link';
    _key: string;
  }>;
  resourceLinks?: Array<{
    label: string;
    link: string;
    _type: 'link';
    _key: string;
  }>;
  contactLinks?: Array<{
    label: string;
    link: string;
    _type: 'link';
    _key: string;
  }>;
};

export type Header = {
  _id: string;
  _type: 'header';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  navItems?: Array<{
    link?: {
      label: string;
      link: string;
    };
    _key: string;
  }>;
  buttons?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'button';
  }>;
};

export type ToolsComponent = {
  _id: string;
  _type: 'toolsComponent';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  heading?: {
    badges?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'badge';
    }>;
    doodle?: 'hard' | 'half-hard' | 'squiggle';
    heading: string;
    subheading?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    buttons?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'button';
    }>;
  };
  tools?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'tool';
  }>;
  section?: {
    paddingTop?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    paddingBottom?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    backgroundImage?: 'home-curve';
  };
};

export type TestimonialComponent = {
  _id: string;
  _type: 'testimonialComponent';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  heading?: {
    badges?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'badge';
    }>;
    doodle?: 'hard' | 'half-hard' | 'squiggle';
    heading: string;
    subheading?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    buttons?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'button';
    }>;
  };
  testimonials?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'testimonial';
  }>;
  section?: {
    paddingTop?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    paddingBottom?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    backgroundImage?: 'home-curve';
  };
};

export type Switchback = {
  _id: string;
  _type: 'switchback';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  heading?: {
    badges?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'badge';
    }>;
    doodle?: 'hard' | 'half-hard' | 'squiggle';
    heading: string;
    subheading?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    buttons?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'button';
    }>;
  };
  switchback1?: {
    title?: string;
    reversed?: boolean;
    liveSite?: string;
    heading?: {
      badges?: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'badge';
      }>;
      doodle?: 'hard' | 'half-hard' | 'squiggle';
      heading: string;
      subheading?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }>;
      buttons?: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'button';
      }>;
    };
    tools?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'tool';
    }>;
    image?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      caption?: string;
      featuredColor?: string;
      _type: 'image';
    };
  };
  switchback2?: {
    title?: string;
    reversed?: boolean;
    liveSite?: string;
    heading?: {
      badges?: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'badge';
      }>;
      doodle?: 'hard' | 'half-hard' | 'squiggle';
      heading: string;
      subheading?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }>;
      buttons?: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'button';
      }>;
    };
    tools?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'tool';
    }>;
    image?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      caption?: string;
      featuredColor?: string;
      _type: 'image';
    };
  };
  section?: {
    paddingTop?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    paddingBottom?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    backgroundImage?: 'home-curve';
  };
};

export type PortCo = {
  _id: string;
  _type: 'portCo';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  heading?: {
    badges?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'badge';
    }>;
    doodle?: 'hard' | 'half-hard' | 'squiggle';
    heading: string;
    subheading?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    buttons?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'button';
    }>;
  };
  brands?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'company';
  }>;
  section?: {
    paddingTop?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    paddingBottom?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    backgroundImage?: 'home-curve';
  };
};

export type Hero = {
  _id: string;
  _type: 'hero';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  heading?: {
    badges?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'badge';
    }>;
    doodle?: 'hard' | 'half-hard' | 'squiggle';
    heading: string;
    subheading?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    buttons?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'button';
    }>;
  };
  section?: {
    paddingTop?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    paddingBottom?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    backgroundImage?: 'home-curve';
  };
};

export type ConversionPanel = {
  _id: string;
  _type: 'conversionPanel';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  heading?: {
    badges?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'badge';
    }>;
    doodle?: 'hard' | 'half-hard' | 'squiggle';
    heading: string;
    subheading?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    buttons?: Array<{
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: 'button';
    }>;
  };
  form?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'form';
  };
  section?: {
    paddingTop?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    paddingBottom?: 'none' | 'small' | 'medium' | 'large' | 'xLarge';
    backgroundImage?: 'home-curve';
  };
};

export type Form = {
  _id: string;
  _type: 'form';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  formFields?: Array<{
    required?: boolean;
    fieldName: string;
    placeholder: string;
    fieldId: Slug;
    inputType: 'text' | 'email' | 'phone' | 'textArea' | 'file';
    split?: boolean;
    _type: 'formFields';
    _key: string;
  }>;
};

export type Button = {
  _id: string;
  _type: 'button';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  button?: {
    label: string;
    link: string;
    icon?: 'none' | 'mail' | 'gitHub' | 'linkedIn' | 'externalLink';
    theme?: 'fill' | 'outline' | 'text';
  };
};

export type Badge = {
  _id: string;
  _type: 'badge';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label?: string;
  variant?: string;
};

export type Tool = {
  _id: string;
  _type: 'tool';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  tool?: string;
  company?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'company';
  };
  logoId?:
    | 'contentful'
    | 'dato'
    | 'figma'
    | 'gatsby'
    | 'github'
    | 'jira'
    | 'nextjs'
    | 'panda'
    | 'storybook'
    | 'tailwind';
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Testimonial = {
  _id: string;
  _type: 'testimonial';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  authorName?: string;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'person';
  };
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Person = {
  _id: string;
  _type: 'person';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  displayName?: string;
  fullName?: {
    firstName?: string;
    lastName?: string;
  };
  position?: string;
  headshot?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    caption?: string;
    featuredColor?: string;
    _type: 'image';
  };
  company?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'company';
  };
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Company = {
  _id: string;
  _type: 'company';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  companyName?: string;
  logoId?:
    | 'curative'
    | 'retool'
    | 'justworks'
    | 'webstacks'
    | 'juneshine'
    | 'trustmachines'
    | 'shopmonkey'
    | 'pattern'
    | 'lineup'
    | 'sevenrooms'
    | 'montucky'
    | 'phs'
    | 'elysian'
    | 'leafly'
    | 'pow';
};

export type IconPicker = {
  _type: 'iconPicker';
  provider?: string;
  name?: string;
  svg?: string;
};

export type HighlightColor = {
  _type: 'highlightColor';
  label?: string;
  value?: string;
};

export type TextColor = {
  _type: 'textColor';
  label?: string;
  value?: string;
};

export type SimplerColor = {
  _type: 'simplerColor';
  label?: string;
  value?: string;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Pages
  | Footer
  | Header
  | ToolsComponent
  | TestimonialComponent
  | Switchback
  | PortCo
  | Hero
  | ConversionPanel
  | Form
  | Button
  | Badge
  | Tool
  | Testimonial
  | Person
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Company
  | IconPicker
  | HighlightColor
  | TextColor
  | SimplerColor
  | MediaTag
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/layout/footer/index.tsx
// Variable: FOOTER_QUERY
// Query: *[_type == "footer"][0]{_id,_type,contactLinks[],resourceLinks[],mainLinks[]}
export type FOOTER_QUERYResult = {
  _id: string;
  _type: 'footer';
  contactLinks: Array<{
    label: string;
    link: string;
    _type: 'link';
    _key: string;
  }> | null;
  resourceLinks: Array<{
    label: string;
    link: string;
    _type: 'link';
    _key: string;
  }> | null;
  mainLinks: Array<{
    label: string;
    link: string;
    _type: 'link';
    _key: string;
  }> | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "footer"][0]{_id,_type,contactLinks[],resourceLinks[],mainLinks[]}': FOOTER_QUERYResult;
  }
}
